{"name": "test_case_practice_form", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '#uploadPicture')).type: C:\\Users\\Artemiy\\PycharmProjects\\demoqa_test_form\\demoqa_test_form\\resources\\123.png\n\nReason: InvalidArgumentException: Message: invalid argument: File not found : C:\\Users\\Artemiy\\PycharmProjects\\demoqa_test_form\\demoqa_test_form\\resources\\123.png\n  (Session info: chrome=103.0.5060.134)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00AD5FD3+2187219]\n\tOrdinal0 [0x00A6E6D1+1763025]\n\tOrdinal0 [0x00983E78+802424]\n\tOrdinal0 [0x009AB7FA+964602]\n\tOrdinal0 [0x009CCB8C+1100684]\n\tOrdinal0 [0x009A8394+951188]\n\tOrdinal0 [0x009CCDA4+1101220]\n\tOrdinal0 [0x009DCFC2+1167298]\n\tOrdinal0 [0x009CC9A6+1100198]\n\tOrdinal0 [0x009A6F80+946048]\n\tOrdinal0 [0x009A7E76+949878]\n\tGetHandleVerifier [0x00D790C2+2721218]\n\tGetHandleVerifier [0x00D6AAF0+2662384]\n\tGetHandleVerifier [0x00B6137A+526458]\n\tGetHandleVerifier [0x00B60416+522518]\n\tOrdinal0 [0x00A74EAB+1789611]\n\tOrdinal0 [0x00A797A8+1808296]\n\tOrdinal0 [0x00A79895+1808533]\n\tOrdinal0 [0x00A826C1+1844929]\n\tBaseThreadInitThunk [0x76FCFA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x779C7A9E+286]\n\tRtlGetAppContainerNamedObjectPath [0x779C7A6E+238]\n\nScreenshot: file://C:\\Users\\Artemiy\\.selene\\screenshots\\1658676318653\\1658676318654.png\nPageSource: file://C:\\Users\\Artemiy\\.selene\\screenshots\\1658676318653\\1658676318654.html", "trace": "self = <selene.core.wait.Wait object at 0x000002667A174EB0>\nfn = <selene.core.wait.Command object at 0x000002667A174EE0>\n\n    def for_(self, fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self._entity)\n\n..\\venv\\lib\\site-packages\\selene\\core\\wait.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.wait.Command object at 0x000002667A174EE0>\nentity = <selene.core.entity.Element object at 0x000002667A1AA880>\n\n    def __call__(self, entity: T) -> R:\n>       return self._fn(entity)\n\n..\\venv\\lib\\site-packages\\selene\\core\\wait.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nelement = <selene.core.entity.Element object at 0x000002667A1AA880>\n\n    def fn(element: Element):\n        if self.config.wait_for_no_overlap_found_by_js:\n            webelement = element._actual_not_overlapped_webelement\n        else:\n            webelement = element()\n>       webelement.send_keys(str(text))\n\n..\\venv\\lib\\site-packages\\selene\\core\\entity.py:388: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"dbbe1d0cc6921597305285f01d9c6b67\", element=\"ceb394f3-3a5a-4a70-987e-cf121c415110\")>\nvalue = ('C:\\\\Users\\\\Artemiy\\\\PycharmProjects\\\\demoqa_test_form\\\\demoqa_test_form\\\\resources\\\\123.png',)\n\n    def send_keys(self, *value) -> None:\n        \"\"\"Simulates typing into the element.\n    \n        :Args:\n            - value - A string for typing, or setting form fields.  For setting\n              file inputs, this could be a local file path.\n    \n        Use this to send simple key events or to fill out form fields::\n    \n            form_textfield = driver.find_element(By.NAME, 'username')\n            form_textfield.send_keys(\"admin\")\n    \n        This can also be used to set file inputs.\n    \n        ::\n    \n            file_input = driver.find_element(By.NAME, 'profilePic')\n            file_input.send_keys(\"path/to/profilepic.gif\")\n            # Generally it's better to wrap the file path in one of the methods\n            # in os.path to return the actual path to support cross OS testing.\n            # file_input.send_keys(os.path.abspath(\"path/to/profilepic.gif\"))\n    \n        \"\"\"\n        # transfer file to another machine only if remote driver is used\n        # the same behaviour as for java binding\n        if self.parent._is_remote:\n            local_files = list(map(lambda keys_to_send:\n                                   self.parent.file_detector.is_local_file(str(keys_to_send)),\n                                   ''.join(map(str, value)).split('\\n')))\n            if None not in local_files:\n                remote_files = []\n                for file in local_files:\n                    remote_files.append(self._upload(file))\n                value = '\\n'.join(remote_files)\n    \n>       self._execute(Command.SEND_KEYS_TO_ELEMENT,\n                      {'text': \"\".join(keys_to_typing(value)),\n                       'value': keys_to_typing(value)})\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:600: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"dbbe1d0cc6921597305285f01d9c6b67\", element=\"ceb394f3-3a5a-4a70-987e-cf121c415110\")>\ncommand = 'sendKeysToElement'\nparams = {'id': 'ceb394f3-3a5a-4a70-987e-cf121c415110', 'sessionId': 'dbbe1d0cc6921597305285f01d9c6b67', 'text': 'C:\\\\Users\\\\Ar...ycharmProjects\\\\demoqa_test_form\\\\demoqa_test_form\\\\resources\\\\123.png', 'value': ['C', ':', '\\\\', 'U', 's', 'e', ...]}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params['id'] = self._id\n>       return self._parent.execute(command, params)\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:773: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"dbbe1d0cc6921597305285f01d9c6b67\")>\ndriver_command = 'sendKeysToElement'\nparams = {'id': 'ceb394f3-3a5a-4a70-987e-cf121c415110', 'text': 'C:\\\\Users\\\\Artemiy\\\\PycharmProjects\\\\demoqa_test_form\\\\demoqa_test_form\\\\resources\\\\123.png', 'value': ['C', ':', '\\\\', 'U', 's', 'e', ...]}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:430: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002667A1A9D30>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: File not found : C:\\\\\\\\Use...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x779C7A9E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x779C7A6E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : C:\\Users\\Artemiy\\PycharmProjects\\demoqa_test_form\\demoqa_test_form\\resources\\123.png\nE         (Session info: chrome=103.0.5060.134)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00AD5FD3+2187219]\nE       \tOrdinal0 [0x00A6E6D1+1763025]\nE       \tOrdinal0 [0x00983E78+802424]\nE       \tOrdinal0 [0x009AB7FA+964602]\nE       \tOrdinal0 [0x009CCB8C+1100684]\nE       \tOrdinal0 [0x009A8394+951188]\nE       \tOrdinal0 [0x009CCDA4+1101220]\nE       \tOrdinal0 [0x009DCFC2+1167298]\nE       \tOrdinal0 [0x009CC9A6+1100198]\nE       \tOrdinal0 [0x009A6F80+946048]\nE       \tOrdinal0 [0x009A7E76+949878]\nE       \tGetHandleVerifier [0x00D790C2+2721218]\nE       \tGetHandleVerifier [0x00D6AAF0+2662384]\nE       \tGetHandleVerifier [0x00B6137A+526458]\nE       \tGetHandleVerifier [0x00B60416+522518]\nE       \tOrdinal0 [0x00A74EAB+1789611]\nE       \tOrdinal0 [0x00A797A8+1808296]\nE       \tOrdinal0 [0x00A79895+1808533]\nE       \tOrdinal0 [0x00A826C1+1844929]\nE       \tBaseThreadInitThunk [0x76FCFA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x779C7A9E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x779C7A6E+238]\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: InvalidArgumentException\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_case_practice_form():\n        allure.dynamic.tag(\"Web application\")\n        allure.dynamic.severity(Severity.CRITICAL)\n        allure.dynamic.feature(\"Тесты automation-practice-form\")\n        allure.dynamic.story(\"Проверка отправленных данных в таблице через форму\")\n    \n        with allure.step('Открываем /automation-practice-form'):\n            url_open_size('/automation-practice-form')\n    \n        with allure.step('Заполняем поля данными'):\n            s('//*[@id=\"firstName\"]').type('Jack')\n            s('//*[@id=\"lastName\"]').type('Shepard')\n            s('//*[@id=\"userEmail\"]').type('Jack@mail.ru')\n            s('//*[@id=\"userNumber\"]').type('4815162342')\n            s('//*[@id=\"currentAddress\"]').type('Oceanic')\n    \n        with allure.step('Выбираем элемент в поле Subject'):\n            app.subject(s(subjects_input)).select_element_in_list('g', select_element_in_subject)\n    \n        with allure.step('Выбираем текущую дату'):\n            app.date_picker(s(date_of_birth_input)).select_date_in_datepicker()\n    \n        with allure.step('Выбираем пол: male'):\n            s(gender_select_male).click()\n    \n        with allure.step('Выбираем хобби: Спорт'):\n            s(hobbies_select_sports).click()\n    \n        with allure.step('Выбираем в списке State: 1 элемент'):\n            app.drop_down(s(list_state)).select_element_in_dropdown(element_in_list_state)\n    \n        with allure.step('Выбираем в списке City: 1 элемент'):\n            app.drop_down(s(list_city)).select_element_in_dropdown(element_in_list_city)\n    \n        with allure.step('Добавляем картинку в поле загрузки файла'):\n>           add_file(send_picture_button, file_name=file_name)\n\ntest_form.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\tests\\helper\\acceptance_test_modul.py:8: in add_file\n    s(element).type(os.path.abspath(file_name))\n..\\venv\\lib\\site-packages\\selene\\core\\entity.py:392: in type\n    self.wait.for_(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.wait.Wait object at 0x000002667A174EB0>\nfn = <selene.core.wait.Command object at 0x000002667A174EE0>\n\n        def for_(self, fn: Callable[[E], R]) -> R:\n            finish_time = time.time() + self._timeout\n    \n            while True:\n                try:\n                    return fn(self._entity)\n                except Exception as reason:\n                    if time.time() > finish_time:\n    \n                        reason_message = str(reason)\n    \n                        reason_string = '{name}: {message}'.format(\n                            name=reason.__class__.__name__, message=reason_message\n                        )\n                        # todo: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                        # stacktrace = getattr(reason, 'stacktrace', None)\n                        timeout = self._timeout\n                        entity = self._entity\n    \n                        failure = TimeoutException(\n                            f'''\n    \n    Timed out after {timeout}s, while waiting for:\n    {entity}.{fn}\n    \n    Reason: {reason_string}'''\n                        )\n    \n>                       raise self._hook_failure(failure)\nE                       selene.core.exceptions.TimeoutException: Message: \nE                       \nE                       Timed out after 4s, while waiting for:\nE                       browser.element(('css selector', '#uploadPicture')).type: C:\\Users\\Artemiy\\PycharmProjects\\demoqa_test_form\\demoqa_test_form\\resources\\123.png\nE                       \nE                       Reason: InvalidArgumentException: Message: invalid argument: File not found : C:\\Users\\Artemiy\\PycharmProjects\\demoqa_test_form\\demoqa_test_form\\resources\\123.png\nE                         (Session info: chrome=103.0.5060.134)\nE                       Stacktrace:\nE                       Backtrace:\nE                       \tOrdinal0 [0x00AD5FD3+2187219]\nE                       \tOrdinal0 [0x00A6E6D1+1763025]\nE                       \tOrdinal0 [0x00983E78+802424]\nE                       \tOrdinal0 [0x009AB7FA+964602]\nE                       \tOrdinal0 [0x009CCB8C+1100684]\nE                       \tOrdinal0 [0x009A8394+951188]\nE                       \tOrdinal0 [0x009CCDA4+1101220]\nE                       \tOrdinal0 [0x009DCFC2+1167298]\nE                       \tOrdinal0 [0x009CC9A6+1100198]\nE                       \tOrdinal0 [0x009A6F80+946048]\nE                       \tOrdinal0 [0x009A7E76+949878]\nE                       \tGetHandleVerifier [0x00D790C2+2721218]\nE                       \tGetHandleVerifier [0x00D6AAF0+2662384]\nE                       \tGetHandleVerifier [0x00B6137A+526458]\nE                       \tGetHandleVerifier [0x00B60416+522518]\nE                       \tOrdinal0 [0x00A74EAB+1789611]\nE                       \tOrdinal0 [0x00A797A8+1808296]\nE                       \tOrdinal0 [0x00A79895+1808533]\nE                       \tOrdinal0 [0x00A826C1+1844929]\nE                       \tBaseThreadInitThunk [0x76FCFA29+25]\nE                       \tRtlGetAppContainerNamedObjectPath [0x779C7A9E+286]\nE                       \tRtlGetAppContainerNamedObjectPath [0x779C7A6E+238]\nE                       \nE                       Screenshot: file://C:\\Users\\Artemiy\\.selene\\screenshots\\1658676318653\\1658676318654.png\nE                       PageSource: file://C:\\Users\\Artemiy\\.selene\\screenshots\\1658676318653\\1658676318654.html\n\n..\\venv\\lib\\site-packages\\selene\\core\\wait.py:125: TimeoutException"}, "steps": [{"name": "Открываем /automation-practice-form", "status": "passed", "start": 1658676318688, "stop": 1658676322067}, {"name": "Заполняем поля данными", "status": "passed", "start": 1658676322067, "stop": 1658676322277}, {"name": "Выбираем элемент в поле Subject", "status": "passed", "start": 1658676322277, "stop": 1658676322389}, {"name": "Выбираем текущую дату", "status": "passed", "start": 1658676322389, "stop": 1658676322544}, {"name": "Выбираем пол: male", "status": "passed", "start": 1658676322544, "stop": 1658676322575}, {"name": "Выбираем хобби: Спорт", "status": "passed", "start": 1658676322575, "stop": 1658676322603}, {"name": "Выбираем в списке State: 1 элемент", "status": "passed", "start": 1658676322603, "stop": 1658676322667}, {"name": "Выбираем в списке City: 1 элемент", "status": "passed", "start": 1658676322667, "stop": 1658676322728}, {"name": "Добавляем картинку в поле загрузки файла", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '#uploadPicture')).type: C:\\Users\\Artemiy\\PycharmProjects\\demoqa_test_form\\demoqa_test_form\\resources\\123.png\n\nReason: InvalidArgumentException: Message: invalid argument: File not found : C:\\Users\\Artemiy\\PycharmProjects\\demoqa_test_form\\demoqa_test_form\\resources\\123.png\n  (Session info: chrome=103.0.5060.134)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00AD5FD3+2187219]\n\tOrdinal0 [0x00A6E6D1+1763025]\n\tOrdinal0 [0x00983E78+802424]\n\tOrdinal0 [0x009AB7FA+964602]\n\tOrdinal0 [0x009CCB8C+1100684]\n\tOrdinal0 [0x009A8394+951188]\n\tOrdinal0 [0x009CCDA4+1101220]\n\tOrdinal0 [0x009DCFC2+1167298]\n\tOrdinal0 [0x009CC9A6+1100198]\n\tOrdinal0 [0x009A6F80+946048]\n\tOrdinal0 [0x009A7E76+949878]\n\tGetHandleVerifier [0x00D790C2+2721218]\n\tGetHandleVerifier [0x00D6AAF0+2662384]\n\tGetHandleVerifier [0x00B6137A+526458]\n\tGetHandleVerifier [0x00B60416+522518]\n\tOrdinal0 [0x00A74EAB+1789611]\n\tOrdinal0 [0x00A797A8+1808296]\n\tOrdinal0 [0x00A79895+1808533]\n\tOrdinal0 [0x00A826C1+1844929]\n\tBaseThreadInitThunk [0x76FCFA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x779C7A9E+286]\n\tRtlGetAppContainerNamedObjectPath [0x779C7A6E+238]\n\nScreenshot: file://C:\\Users\\Artemiy\\.selene\\screenshots\\1658676318653\\1658676318654.png\nPageSource: file://C:\\Users\\Artemiy\\.selene\\screenshots\\1658676318653\\1658676318654.html\n\n", "trace": "  File \"C:\\Users\\Artemiy\\PycharmProjects\\demoqa_test_form\\demoqa_test_form\\test_form.py\", line 44, in test_case_practice_form\n    add_file(send_picture_button, file_name=file_name)\n  File \"C:\\Users\\Artemiy\\PycharmProjects\\demoqa_test_form\\tests\\helper\\acceptance_test_modul.py\", line 8, in add_file\n    s(element).type(os.path.abspath(file_name))\n  File \"C:\\Users\\Artemiy\\PycharmProjects\\demoqa_test_form\\venv\\lib\\site-packages\\selene\\core\\entity.py\", line 392, in type\n    self.wait.for_(\n  File \"C:\\Users\\Artemiy\\PycharmProjects\\demoqa_test_form\\venv\\lib\\site-packages\\selene\\core\\wait.py\", line 125, in for_\n    raise self._hook_failure(failure)\n"}, "start": 1658676322728, "stop": 1658676326885}], "attachments": [{"name": "log", "source": "3f07b517-5eb5-43b6-b76d-f4430927f571-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "86a4cdbd-93bb-4ea3-bee4-7c213ee8f404-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "01903b53-f87f-4d7e-9638-5bf3eb1bd1d1-attachment.txt", "type": "text/plain"}], "start": 1658676318688, "stop": 1658676326887, "uuid": "3f6c8483-1b1b-4b8c-97f4-dce741b6faf1", "historyId": "ba93421c1dc0276a4feb0b9e44392d00", "testCaseId": "08a168f3cf688e005f3d4bb1cb9fcb26", "fullName": "test_form#test_case_practice_form", "labels": [{"name": "tag", "value": "Web application"}, {"name": "severity", "value": "critical"}, {"name": "feature", "value": "Тесты automation-practice-form"}, {"name": "story", "value": "Проверка отправленных данных в таблице через форму"}, {"name": "suite", "value": "test_form"}, {"name": "host", "value": "HOME-PC"}, {"name": "thread", "value": "12104-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_form"}]}